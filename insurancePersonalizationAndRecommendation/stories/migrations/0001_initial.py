# Generated by Django 3.2 on 2021-05-06 17:35

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('insuranceProducts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('characterName', models.CharField(max_length=50, unique=True, verbose_name='Name')),
                ('backstory', models.CharField(max_length=300, verbose_name='Backstory')),
                ('topType', models.CharField(blank=True, choices=[('Eyepatch', 'Eyepatch'), ('HairColor', 'HairColor'), ('Hat', 'Hat'), ('HatColor', 'HatColor'), ('Hijab', 'Hijab'), ('LongHairBigHair', 'LongHairBigHair'), ('LongHairBob', 'LongHairBob'), ('LongHairBun', 'LongHairBun'), ('LongHairCurly', 'LongHairCurly'), ('LongHairCurvy', 'LongHairCurvy'), ('LongHairDreads', 'LongHairDreads'), ('LongHairFrida', 'LongHairFrida'), ('LongHairFro', 'LongHairFro'), ('LongHairFroBand', 'LongHairFroBand'), ('LongHairMiaWallace', 'LongHairMiaWallace'), ('LongHairNotTooLong', 'LongHairNotTooLong'), ('LongHairShavedSides', 'LongHairShavedSides'), ('LongHairStraight', 'LongHairStraight'), ('LongHairStraight2', 'LongHairStraight2'), ('LongHairStraightStrand', 'LongHairStraightStrand'), ('NoHair', 'NoHair'), ('ShortHairDreads01', 'ShortHairDreads01'), ('ShortHairDreads02', 'ShortHairDreads02'), ('ShortHairFrizzle', 'ShortHairFrizzle'), ('ShortHairShaggy', 'ShortHairShaggy'), ('ShortHairShaggyMullet', 'ShortHairShaggyMullet'), ('ShortHairShortCurly', 'ShortHairShortCurly'), ('ShortHairShortFlat', 'ShortHairShortFlat'), ('ShortHairShortRound', 'ShortHairShortRound'), ('ShortHairShortWaved', 'ShortHairShortWaved'), ('ShortHairSides', 'ShortHairSides'), ('ShortHairTheCaesar', 'ShortHairTheCaesar'), ('ShortHairTheCaesarSidePart', 'ShortHairTheCaesarSidePart'), ('Turban', 'Turban'), ('WinterHat1', 'WinterHat1'), ('WinterHat2', 'WinterHat2'), ('WinterHat3', 'WinterHat3'), ('WinterHat4', 'WinterHat4')], max_length=50, null=True, verbose_name='Top')),
                ('accessoriesType', models.CharField(blank=True, choices=[('Blank', 'Blank'), ('Kurt', 'Kurt'), ('Prescription01', 'Prescription01'), ('Prescription02', 'Prescription02'), ('Round', 'Round'), ('Sunglasses', 'Sunglasses'), ('Wayfarers', 'Wayfarers')], max_length=50, null=True, verbose_name='üëì Accessories')),
                ('hatColor', models.CharField(blank=True, choices=[('Black', 'Black'), ('Blue01', 'Blue01'), ('Blue02', 'Blue02'), ('Blue03', 'Blue03'), ('Gray01', 'Gray01'), ('Gray02', 'Gray02'), ('Heather', 'Heather'), ('PastelBlue', 'PastelBlue'), ('PastelGreen', 'PastelGreen'), ('PastelOrange', 'PastelOrange'), ('PastelRed', 'PastelRed'), ('PastelYellow', 'PastelYellow'), ('Pink', 'Pink'), ('Red', 'Red'), ('White', 'White')], max_length=50, null=True, verbose_name='üé® HatColor')),
                ('hairColor', models.CharField(blank=True, choices=[('Black', 'Black'), ('Blonde', 'Blonde'), ('BlondeGolden', 'BlondeGolden'), ('Brown', 'Brown'), ('BrownDark', 'BrownDark'), ('PastelPink', 'PastelPink'), ('Platinum', 'Platinum'), ('Red', 'Red'), ('SilverGray', 'SilverGray')], max_length=50, null=True, verbose_name='üíà Hair Color')),
                ('facialHairType', models.CharField(blank=True, choices=[('BeardLight', 'BeardLight'), ('BeardMagestic', 'BeardMagestic'), ('BeardMajestic', 'BeardMajestic'), ('BeardMedium', 'BeardMedium'), ('Blank', 'Blank'), ('Colors', 'Colors'), ('MoustacheFancy', 'MoustacheFancy'), ('MoustacheMagnum', 'MoustacheMagnum')], max_length=50, null=True, verbose_name='Facial Hair')),
                ('facialHairColor', models.CharField(blank=True, choices=[('Auburn', 'Auburn'), ('Black', 'Black'), ('Blonde', 'Blonde'), ('BlondeGolden', 'BlondeGolden'), ('Brown', 'Brown'), ('BrownDark', 'BrownDark'), ('Platinum', 'Platinum'), ('Red', 'Red')], max_length=50, null=True, verbose_name='‚úÇÔ∏è Facial Hair Color')),
                ('clotheType', models.CharField(blank=True, choices=[('BlazerShirt', 'BlazerShirt'), ('BlazerSweater', 'BlazerSweater'), ('CollarSweater', 'CollarSweater'), ('Colors', 'Colors'), ('GraphicShirt', 'GraphicShirt'), ('Graphics', 'Graphics'), ('Hoodie', 'Hoodie')], max_length=50, null=True, verbose_name='üëî Clothes')),
                ('clotheColor', models.CharField(blank=True, choices=[('Black', 'Black'), ('Blue01', 'Blue01'), ('Blue02', 'Blue02'), ('Blue03', 'Blue03'), ('Gray01', 'Gray01'), ('Gray02', 'Gray02'), ('Heather', 'Heather'), ('PastelBlue', 'PastelBlue'), ('PastelGreen', 'PastelGreen'), ('PastelOrange', 'PastelOrange'), ('PastelRed', 'PastelRed'), ('PastelYellow', 'PastelYellow'), ('Pink', 'Pink'), ('Red', 'Red'), ('White', 'White')], max_length=50, null=True, verbose_name='Color Fabric')),
                ('graphicType', models.CharField(blank=True, choices=[('Bat', 'Bat'), ('Cumbia', 'Cumbia'), ('Deer', 'Deer'), ('Diamond', 'Diamond'), ('Hola', 'Hola'), ('Pizza', 'Pizza'), ('Resist', 'Resist'), ('Selena', 'Selena'), ('Bear', 'Bear'), ('SkullOutline', 'SkullOutline'), ('Skull', 'Skull')], max_length=50, null=True, verbose_name='Graphic')),
                ('eyeType', models.CharField(blank=True, choices=[('Default', 'Default'), ('Close', 'Close'), ('Cry', 'Cry'), ('Dizzy', 'Dizzy'), ('EyeRoll', 'EyeRoll'), ('Happy', 'Happy'), ('Hearts', 'Hearts'), ('Side', 'Side'), ('Squint', 'Squint'), ('Surprised', 'Surprised'), ('Wink', 'Wink'), ('WinkWacky', 'WinkWacky')], max_length=50, null=True, verbose_name='üëÅ Eyes')),
                ('eyebrowType', models.CharField(blank=True, choices=[('Default', 'Default'), ('Angry', 'Angry'), ('AngryNatural', 'AngryNatural'), ('DefaultNatural', 'DefaultNatural'), ('FlatNatural', 'FlatNatural'), ('FrownNatural', 'FrownNatural'), ('RaisedExcited', 'RaisedExcited'), ('RaisedExcitedNatural', 'RaisedExcitedNatural'), ('SadConcerned', 'SadConcerned'), ('SadConcernedNatural', 'SadConcernedNatural'), ('UnibrowNatural', 'UnibrowNatural'), ('UpDown', 'UpDown'), ('UpDownNatural', 'UpDownNatural')], max_length=50, null=True, verbose_name='‚úèÔ∏è Eyebrow')),
                ('mouthType', models.CharField(blank=True, choices=[('Default', 'Default'), ('Angry', 'Angry'), ('AngryNatural', 'AngryNatural'), ('DefaultNatural', 'DefaultNatural'), ('FlatNatural', 'FlatNatural'), ('FrownNatural', 'FrownNatural'), ('RaisedExcited', 'RaisedExcited'), ('RaisedExcitedNatural', 'RaisedExcitedNatural'), ('SadConcerned', 'SadConcerned'), ('SadConcernedNatural', 'SadConcernedNatural'), ('UnibrowNatural', 'UnibrowNatural'), ('UpDown', 'UpDown'), ('UpDownNatural', 'UpDownNatural')], max_length=50, null=True, verbose_name='üëÑ Mouth')),
                ('skinColor', models.CharField(blank=True, choices=[('Tanned', 'Tanned'), ('Yellow', 'Yellow'), ('Pale', 'Pale'), ('Light', 'Light'), ('Brown', 'Brown'), ('DarkBrown', 'DarkBrown'), ('Black', 'Black')], max_length=50, null=True, verbose_name='üé® Skin')),
                ('avatarImage', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Avatar Image')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Objection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('objectionName', models.CharField(max_length=50, unique=True, verbose_name='Name of Objection')),
                ('primaryIssueOrConcern', models.CharField(max_length=300, verbose_name='Primary issues or concerns')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ObjectionHandle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('buttleName', models.CharField(max_length=50, unique=True, verbose_name='Name of Re-Buttle or Pre-Buttle')),
                ('buttleMessaging', models.CharField(max_length=300, verbose_name='Message')),
                ('buttleType', models.CharField(blank=True, choices=[('prebuttle', 'Prebuttle'), ('rebuttle', 'Rebuttle')], max_length=12, null=True, verbose_name='Buttle Type')),
                ('objection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Objection', to='stories.objection')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('storyName', models.CharField(max_length=50, unique=True, verbose_name='Name')),
                ('summary', models.CharField(max_length=300, verbose_name='Summary')),
                ('introduction', models.CharField(max_length=300, verbose_name='Introduction')),
                ('middle', models.CharField(max_length=300, verbose_name='Middle')),
                ('conclusion', models.CharField(max_length=300, verbose_name='Conclusion')),
                ('keyInsights', models.CharField(max_length=300, verbose_name='Key Insights, Messaging or Lessons')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoryStatsTracker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('hasMessagingTransmitted', models.BooleanField(default=False, verbose_name='Messaging relayed to customer')),
                ('messagingTransmissionType', models.CharField(choices=[('spokenByAgent', 'spokenByAgent'), ('shownByAgent', 'shownByAgent'), ('selfServiceDisplay', 'selfServiceDisplay'), ('agentDeclinedUsage', 'agentDeclinedUsage')], max_length=20, verbose_name='How message relayed to customer')),
                ('agentPerceptionOfCustomerResp', models.CharField(blank=True, choices=[('positive', 'positive'), ('neutral', 'neutral'), ('negative', 'negative')], max_length=20, verbose_name='Agent Perception of customer response')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('insuranceDiscussion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='insuranceProducts.insurancediscussion')),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='StoryStat', to='stories.story')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoryCharacter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('priorityOrder', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Priority Order')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Character', to='stories.character')),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Story', to='stories.story')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ObjectioonStatsTracker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('hasMessagingTransmitted', models.BooleanField(default=False, verbose_name='Messaging relayed to customer')),
                ('messagingTransmissionType', models.CharField(choices=[('spokenByAgent', 'spokenByAgent'), ('shownByAgent', 'shownByAgent'), ('selfServiceDisplay', 'selfServiceDisplay'), ('agentDeclinedUsage', 'agentDeclinedUsage')], max_length=20, verbose_name='How message relayed to customer')),
                ('agentPerceptionOfCustomerResp', models.CharField(blank=True, choices=[('positive', 'positive'), ('neutral', 'neutral'), ('negative', 'negative')], max_length=20, verbose_name='Agent Perception of customer response')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('insuranceDiscussion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='insuranceProducts.insurancediscussion')),
                ('objection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ObjectionStat', to='stories.objection')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ObjectionHandleStatsTracker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('hasMessagingTransmitted', models.BooleanField(default=False, verbose_name='Messaging relayed to customer')),
                ('messagingTransmissionType', models.CharField(choices=[('spokenByAgent', 'spokenByAgent'), ('shownByAgent', 'shownByAgent'), ('selfServiceDisplay', 'selfServiceDisplay'), ('agentDeclinedUsage', 'agentDeclinedUsage')], max_length=20, verbose_name='How message relayed to customer')),
                ('agentPerceptionOfCustomerResp', models.CharField(blank=True, choices=[('positive', 'positive'), ('neutral', 'neutral'), ('negative', 'negative')], max_length=20, verbose_name='Agent Perception of customer response')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('insuranceDiscussion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='insuranceProducts.insurancediscussion')),
                ('objectionHandle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ObjectionHandleStat', to='stories.objectionhandle')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
